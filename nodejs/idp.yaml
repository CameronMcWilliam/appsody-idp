apiVersion: codewind.dev/v1alpha1
metadata: 
  name: nodejs
  language: javascript 
  framework: nodejs 
  version: 0.0.1 
  maintainers:  
  - name: Jonathan West
    email: jgwest@email.com
    githubID: jgwest

spec:

  dev: 
    watched:
      # On the local machine, which path to watch, from the root folder of the project.
      # For example /codewind-workspace/my-project would be /
      watchDir: /src # Optional, otherwise assumed to be the root /
      ignoredPaths: # Same format as filewatcher, Optional, if not specified then no excludes.
      - /target
      - /some.file

    uploadFilter: # Unclear if we can just combine this with watch, or if it needs to be separate
      ignoredPaths: # Same format as filewatcher, Optional, if not specified then no excludes.
      - /target

    typeDetection: # Optional: Rules that are used to detect if this IDP is applicable to a given project (eg OpenLiberty IDP for an OpenLiberty-based app)
    # At least one rule must match for a type; ie this is an OR clause list, not an AND clause list.
    - pathSelector: # At least one 'pathSelector' entry must exist if typeDetection is specified
        # Optional, Either a 'rootPath' xor a 'filenameWildcard' must be specified
        rootPath: # example: /pom.xml, or /go.mod
        filenameWildcard: # example: server.xml, or *.go; this means recursively walk a project and look for filenames that match this pattern. Same pattern style as filewatcher.
      textStringsToMatch: # Optional: If a file matches one of the selectors, then look for at least one of these strings (ie OR clause list, not AND clause list). 
      - net.wasdev.wlp.maven.plugins # Example: if this ID is found in the file, then this IDP should be considered to be applicable to the project
    
  runtime:
    
    image: node:10-alpine

    # If this field is specified, the `ENTRYPOINT` of the container will be replaced with:
    # a container command of "sh -c `mkdir -p (parent dit); touch (path specified); tail -f (path specified)`"
    overrideEntrypointTailToFile: /tmp/server.log # file path within the container to tail
    
    endpoints: # Not optional if HTTP(S) port is specified
      containerHealth: /health # How to tell the container is healthy
      appRoot: /app # Not a health check

    ports: # All are optional, display a warning if neither HTTP port is specified
      internalHttpPort: 9080 
      internalHttpsPort: 9443
      internalDebugPort: 7777
      internalPerformancePort: 9050
      
    logs: # Optional: Ability to reference arbitrary log file types that aren't included in container stderr/stdout
    - type: some.type
      path: /logs/(etc)

    env: # Defined as below

    kubernetes: # Values only used for Kube deployments    

  shared:

    containers:
    
    volumes: 

    env: # Optional: Ability to map key/value pairs into the container as environment variables, shared between both runtime and tasks
    # - name: key
    #   value: value

  tasks:
    # Task containers will ALWAYS stay up and be reused after they are used (eg they will never be disposed of after a single use).

    # Tasks that share the same build image will ALWAYS run in the same container during a scenario.

    - name: npm-install-and-run
      type: Runtime # Required field: One of: Runtime (task runs in runtime container), Shared (task runs outside runtime, but shares a container with another task), Standalone (task runs outside runtime, should not share a container with another task)
      command: ["npm", "install;", "npm", "start"]
      # Tasks containers will always be started with a command to tail -f /dev/null, so that they persist. The actual tasks themselves will be run w/ kubectl exec
      
      workingDirectory: /tmp # optional, where in the container to run the command

      logs: # Ability to reference arbitrary log file types that aren't included in container stderr/stdout
      - type: npm.log
        path: /logs/(etc)
    
      repoMappings:

      sourceMapping:
      env: # Optional key/value env var pairs, as above
      # Values specified here will replace those specified in container, if there is an overlap.

  scenarios:
    - name: full-build
      tasks: ["npm-install-and-run"]
